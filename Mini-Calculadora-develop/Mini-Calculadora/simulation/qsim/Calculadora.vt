// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2019 18:55:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Calculadora
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Calculadora_vlg_sample_tst(
	ld,
	s0,
	s1,
	s2,
	x1,
	x2,
	sampler_tx
);
input  ld;
input  s0;
input  s1;
input  s2;
input [3:0] x1;
input [3:0] x2;
output sampler_tx;

reg sample;
time current_time;
always @(ld or s0 or s1 or s2 or x1 or x2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Calculadora_vlg_check_tst (
	c0,
	ctrl,
	y,
	sampler_rx
);
input  c0;
input [1:0] ctrl;
input [3:0] y;
input sampler_rx;

reg  c0_expected;
reg [1:0] ctrl_expected;
reg [3:0] y_expected;

reg  c0_prev;
reg [1:0] ctrl_prev;
reg [3:0] y_prev;

reg  c0_expected_prev;
reg [1:0] ctrl_expected_prev;
reg [3:0] y_expected_prev;

reg  last_c0_exp;
reg [1:0] last_ctrl_exp;
reg [3:0] last_y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	c0_prev = c0;
	ctrl_prev = ctrl;
	y_prev = y;
end

// update expected /o prevs

always @(trigger)
begin
	c0_expected_prev = c0_expected;
	ctrl_expected_prev = ctrl_expected;
	y_expected_prev = y_expected;
end



// expected c0
initial
begin
	c0_expected = 1'bX;
end 
// expected ctrl[ 1 ]
initial
begin
	ctrl_expected[1] = 1'bX;
end 
// expected ctrl[ 0 ]
initial
begin
	ctrl_expected[0] = 1'bX;
end 
// expected y[ 3 ]
initial
begin
	y_expected[3] = 1'bX;
end 
// expected y[ 2 ]
initial
begin
	y_expected[2] = 1'bX;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
end 
// generate trigger
always @(c0_expected or c0 or ctrl_expected or ctrl or y_expected or y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c0 = %b | expected ctrl = %b | expected y = %b | ",c0_expected_prev,ctrl_expected_prev,y_expected_prev);
	$display("| real c0 = %b | real ctrl = %b | real y = %b | ",c0_prev,ctrl_prev,y_prev);
`endif
	if (
		( c0_expected_prev !== 1'bx ) && ( c0_prev !== c0_expected_prev )
		&& ((c0_expected_prev !== last_c0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c0_expected_prev);
		$display ("     Real value = %b", c0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c0_exp = c0_expected_prev;
	end
	if (
		( ctrl_expected_prev[0] !== 1'bx ) && ( ctrl_prev[0] !== ctrl_expected_prev[0] )
		&& ((ctrl_expected_prev[0] !== last_ctrl_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_expected_prev);
		$display ("     Real value = %b", ctrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ctrl_exp[0] = ctrl_expected_prev[0];
	end
	if (
		( ctrl_expected_prev[1] !== 1'bx ) && ( ctrl_prev[1] !== ctrl_expected_prev[1] )
		&& ((ctrl_expected_prev[1] !== last_ctrl_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ctrl[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ctrl_expected_prev);
		$display ("     Real value = %b", ctrl_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ctrl_exp[1] = ctrl_expected_prev[1];
	end
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end
	if (
		( y_expected_prev[2] !== 1'bx ) && ( y_prev[2] !== y_expected_prev[2] )
		&& ((y_expected_prev[2] !== last_y_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_exp[2] = y_expected_prev[2];
	end
	if (
		( y_expected_prev[3] !== 1'bx ) && ( y_prev[3] !== y_expected_prev[3] )
		&& ((y_expected_prev[3] !== last_y_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_exp[3] = y_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Calculadora_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ld;
reg s0;
reg s1;
reg s2;
reg [3:0] x1;
reg [3:0] x2;
// wires                                               
wire c0;
wire [1:0] ctrl;
wire [3:0] y;

wire sampler;                             

// assign statements (if any)                          
Calculadora i1 (
// port map - connection between master ports and signals/registers   
	.c0(c0),
	.ctrl(ctrl),
	.ld(ld),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.x1(x1),
	.x2(x2),
	.y(y)
);

// ld
initial
begin
	ld = 1'b0;
end 

// s0
initial
begin
	s0 = 1'b0;
	s0 = #40000 1'b1;
	s0 = #10000 1'b0;
end 

// s1
initial
begin
	s1 = 1'b0;
	s1 = #20000 1'b1;
	s1 = #20000 1'b0;
end 

// s2
initial
begin
	s2 = 1'b0;
	s2 = #10000 1'b1;
	s2 = #10000 1'b0;
	s2 = #10000 1'b1;
	s2 = #10000 1'b0;
	s2 = #10000 1'b1;
end 
// x1[ 3 ]
initial
begin
	x1[3] = 1'b1;
end 
// x1[ 2 ]
initial
begin
	x1[2] = 1'b0;
end 
// x1[ 1 ]
initial
begin
	x1[1] = 1'b1;
end 
// x1[ 0 ]
initial
begin
	x1[0] = 1'b0;
end 
// x2[ 3 ]
initial
begin
	x2[3] = 1'b0;
end 
// x2[ 2 ]
initial
begin
	x2[2] = 1'b0;
	x2[2] = #70000 1'b1;
	x2[2] = #10000 1'b0;
end 
// x2[ 1 ]
initial
begin
	x2[1] = 1'b0;
	x2[1] = #50000 1'b1;
	x2[1] = #20000 1'b0;
end 
// x2[ 0 ]
initial
begin
	x2[0] = 1'b1;
	x2[0] = #50000 1'b0;
	x2[0] = #10000 1'b1;
	x2[0] = #10000 1'b0;
	x2[0] = #20000 1'b1;
end 

Calculadora_vlg_sample_tst tb_sample (
	.ld(ld),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.x1(x1),
	.x2(x2),
	.sampler_tx(sampler)
);

Calculadora_vlg_check_tst tb_out(
	.c0(c0),
	.ctrl(ctrl),
	.y(y),
	.sampler_rx(sampler)
);
endmodule

